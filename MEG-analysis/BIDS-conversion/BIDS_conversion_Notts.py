# -*- coding: utf-8 -*-

"""
===============================================
02. Convert raw MEG data into BIDS format

this code converts raw CTF (.ds) to BIDS format.
It also anonymises the MEG.

Adapted by Sebastian Coleman for Nottingham
CTF data
Original written by Tara Ghafari
==============================================

Notes:
    1) move .pos file into .ds folder
    2) check fid/headshape alignment with 
    bottom section

Issued/Contributions to community:
    1) anonymization with bids only work on the
    foler, this means we can't run the analysis
    on anonymized data because the sub number
    changes every time bids anonymizes the folder
"""

import os.path as op


import mne
from mne_bids import (BIDSPath, write_raw_bids, read_raw_bids, 
                      write_meg_calibration, write_meg_crosstalk, 
                      get_anat_landmarks, write_anat)

# fill these out
subj_code = '2012'  # subject code generated by participant/MEG pc
subject = '2012'  # subject code in mTBI project
session = '03N'  # data collection session within each run
date = '20231207'

data_root = r'R:\DRS-mTBI\Seb\mTBI_predict\data'
MEG_data_folder = op.join(data_root, date)  

# MEG bids conversion
""" using the events extracted from the MEG file, we now convert MEG file to
bids format"""

tasks = ['crt', 'emoface','rest', 'spatt', 'noise']   # task names in CTF file
BIDS_tasks = ['CRT', 'EmoFace', 'rest', 'SpAtt', 'noise']  # task names after BIDS conversion
BIDS_run = ['01', '02']  # run numbers after BIDS conversion
for t, task in enumerate(tasks):
    
    if task=='rest':
        runs = ['run01', 'run02']
    else:
        runs = ['run01']
    
    for r, run in enumerate(runs):

        file_name = op.join(MEG_data_folder,subj_code+'_mTBIPredict_'+date+
                            '_'+subj_code+'-'+session+'-'+task+'-'+run+'.ds')
        filename_events = op.join(MEG_data_folder,subj_code+'_mTBIPredict_'+date+
                            '_'+subj_code+'-'+session+'-'+task+'-'+run+'-eve.txt')    
    
        bids_root = r'R:\DRS-mTBI\Seb\mTBI_predict\BIDS'

        raw = mne.io.read_raw_ctf(file_name,system_clock='truncate', 
                                  verbose=True, preload=False).anonymize()
        raw.set_meas_date(date)
        stim_channel = 'UPPT002'
            
        # Read the events from stim channel
        if 'rest' not in task and 'noise' not in task:
            events = mne.find_events(raw, stim_channel=stim_channel, min_duration=0.001001,
                                     consecutive=False, mask=65280,
                                     mask_type='not_and')  #' mask removes triggers associated
                                                           # with response box channel 
                                                           # (not the response triggers)'
        
        raw.set_annotations(None)
        # define bids path for tasks and empty room
        if 'noise' in task:
            noise_bids_path = BIDSPath(subject='emptyroom', session=date,
                                       task='noise', root=bids_root)
        else:
            bids_path = BIDSPath(subject=subject, session=session,
                                 task=BIDS_tasks[t], run=BIDS_run[r], root=bids_root)
        
        # Anonymize raw data
        raw.anonymize()
        
        # Define events according to the event values       
        if task == 'spatt':
            block_num = {}
            for num in range(1,3+1):
                block_num[f'block_number_{num:01d}'] = num + 10
            
            # commented ones are only on during debugging
            other_events = {'trial_onset': 1, 
                            'cue_onset_right':101, 'cue_onset_left':102, 'cue_offset':103,
                             'catch_onset':104, 'stim_onset':201, #'stim_offset':202,
                             'dot_onset_right':211, 'dot_onset_left':212, #'dot_offset':213,
                             'response_press_onset':255, 'block_end':15,
                             'experiment_end':20, #'experiment_abort':21
                             }
            
            events_id = block_num | other_events
            
        elif task == 'crt':
            block_num = {}
            for num in range(1,4+1):
                block_num[f'block_number_{num:01d}'] = num + 10
                
            other_events = {'trial_onset': 1, 'trial_end':2,
                            'cue_onset_right':101, 'cue_onset_left':102, 'cue_offset':103,
                            'catch_onset':104, 'response_onset_right':254, 'response_onset_left':255, 
                            'block_end':15,'experiment_end':20, #'experiment_abort':21
                            }
            
            events_id = block_num | other_events
            
        elif task == 'emoface':
            face_id = {}
            stim_cat = ['face_happy_id', 'face_angry_id', 'face_neutral_id']
            for count,stim in enumerate(stim_cat):
                for fid in range(35+1):  # range is an end half closed loop
                    face_id[stim+f'_{1+fid:02d}'] = fid + 110 + count*40  # starting points are 110, 150, and 190
                    
            block_num = {}
            for num in range(1,3+1):
                block_num[f'block_number_{num:01d}'] = num + 10
            
            other_events = {'trial_onset': 1, 'trial_end':2,
                            'face_onset_happy':101, 'face_onset_angry':102, 'face_onset_neutral':103, 
                            'face_male':231, 'face_female':232, 'face_offset':104, 
                            'question_onset':105,
                            'response_male_onset':254, 'response_female_onset':255, 
                            'block_end':15,'experiment_end':20, 'experiment_abort':21}
            
            events_id = other_events | face_id | block_num
            
        elif task == 'rest':
                
            #other_events = {'rest_start': 1, 'rest_end':2,
            #                'experiment_abort':21}
            
            #events_id = other_events
            events = None
            events_id = None
            
        # Write anonymized data into BIDS format
        if task == 'noise':
            write_raw_bids(raw, noise_bids_path, overwrite=True, format='FIF')
        else:
            write_raw_bids(raw, bids_path,events=events, 
                           event_id=events_id, overwrite=True, format='FIF')
        
#%% read last fif and check .pos alignment 

raw = mne.io.read_raw_fif(bids_path)
mne.viz.set_3d_options(depth_peeling=False, antialias=False)
kwargs = dict(eeg=False, dig=True, coord_frame="meg", show_axes=True, verbose=True)
fig = mne.viz.plot_alignment(raw.info, meg=("helmet", "sensors", "ref"), **kwargs)
mne.viz.set_3d_title(figure=fig, title="CTF 275")
