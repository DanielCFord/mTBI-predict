
"""
===============================================
02. Convert raw MEG data into BIDS format

this code converts raw MEG data (.fif & .ds)
as well as T1 MRIs to BIDS format.
It also anonizes MEG and defaces MRI file.

written by Tara Ghafari
==============================================

ToDos:
    1) add MRI to bids folder
    2) check the anonimization of MEG 
    3) deface MRI with mne_bids

Issued/Contributions to community:
    1) anonymization with bids only work on the
    foler, this means we can't run the analysis
    on anonymized data because the sub number
    changes every time bids anonymizes the folder
Notes:
    CTF data is still under development by mne_bids
    team
    first run find_events and coregistration before 
    running this script
"""

import os.path as op

import matplotlib.pyplot as plt

from nilearn.plotting import plot_anat

import mne
from mne_bids import (BIDSPath, write_raw_bids, read_raw_bids, 
                      write_meg_calibration, write_meg_crosstalk, 
                      get_anat_landmarks, write_anat)

# fill these out
site = 'Birmingham'
subj_code = 'b59d'  # subject code generated by participant pc
subject = '04'  # subject code in mTBI project
session = '01'  # data collection session within each run
run = '02'  # data collection run for each participant
pilot = 'P' # is the data collected 'P'ilot or 'T'ask?
day = '14'  # date of data collection -> removed after anonymization
month = '09'
year = '2022'

data_root = r'Z:\Projects\mTBI_predict\Collected_Data'

# MEG bids conversion
""" using the events extracted from the MEG file, we now convert MEG file to
bids format"""

tasks = ['SpAtt', 'CRT', 'EmoFace','rest', 'noise']   # short name of task
for task in tasks:

    # specify specific file names
    MEG_data_folder = op.join(data_root, 'MEG_data\Raw-Pilot_Participants')  # RDS folder for MEG data
    
    if site == 'Aston' or site == 'Birmingham':
        data_path = op.join(MEG_data_folder, year + month + day + '_' + subj_code, 
                            year[-2:] + month + day)
        file_extension = '.fif'
        file_name = op.join('sub_' + pilot + '1' + subject + '_ses_' + session +
                            '_task_' + task + '_run_' + run + '_meg')
    elif site == 'Nottingham':
        data_path = op.join(MEG_data_folder, 'NottinghamEquipTest')
        file_prename = 'phantom_mTBIPredict_'
        file_extension = '.ds'
        file_name = op.join(file_prename + year + month + day + '_' + task.lower() 
                            + 'trigcheck')
    

    # specify communal file names
    raw_fname = op.join(data_path, file_name + file_extension)
    events_data = op.join(data_path,file_name + '-eve' + file_extension)
    bids_root = op.join(data_root, 'MNE-bids-data')

    # Define the fine calibration and cross-talk compensation files 
    maxfilter_folder = r'Z:\Projects\mTBI predict\Programming\Python\Preprocessing\MaxFilter'
    crosstalk_file = op.join(maxfilter_folder, 'CT_sparse_SA.fif')  #'reduces interference' 
                                                                    #'between Elekta's co-located' 
                                                                    #'magnetometer and'
                                                                    #'paired gradiometer sensor units'
    calibration_file = op.join(maxfilter_folder, 'sss_cal_SA.dat')  #'encodes site-specific'
                                                                    #'information about sensor' 
                                                                    #'orientations and calibration'
    
    # Read in raw file
    if 'fif' in file_extension:
        raw = mne.io.read_raw_fif(raw_fname, allow_maxshield=True, 
                                  verbose=True, preload=False).anonymize()
        stim_channel = 'STI101'
    
    elif 'ds' in file_extension:
        raw = mne.io.read_raw_ctf(raw_fname,system_clock='truncate', 
                                  verbose=True, preload=False).anonymize()
        stim_channel = 'UPPT002'
        
    # define bids path for tasks and empty room
    if 'noise' in task:
        noise_date = raw.info['meas_date'].strftime('%Y%m%d')
        noise_bids_path = BIDSPath(subject='emptyroom', session=noise_date,
                                   task='noise', root=bids_root)
    else:
        bids_path = BIDSPath(subject=subject, session=session,
                             task=task, run=run, root=bids_root)
    
    # Define events according to the event values       
    if task == 'SpAtt':
        block_num = {}
        for num in range(1,3+1):
            block_num[f'block number {num:01d}'] = num + 10
        
        other_events = {'trial onset': 1, 'trial end':2, 
                        'cue onset right':101, 'cue onset left':102, 'cue offset':103,
                         'catch onset':104, 'stim onset':201, 'stim offset':202,
                         'dot onset right':211, 'dot onset left':212, 'dot offset':213,
                         'response press onset':255, 'block end':15,
                         'experiment end':20, 'experiment abort':21}
        
        events_id = block_num | other_events
        
    elif task == 'CRT':
        block_num = {}
        for num in range(1,4+1):
            block_num[f'block number {num:01d}'] = num + 10
            
        other_events = {'trial onset': 1, 'trial end':2,
                        'cue onset right':101, 'cue onset left':102, 'cue offset':103,
                        'catch onset':104, 'response right onset':254, 'response left onset':255, 
                        'block end':15,'experiment end':20, 'experiment abort':21}
        
        events_id = block_num | other_events
        
    elif task == 'EmoFace':
        face_id = {}
        stim_cat = ['face happy', 'face angry', 'face neutral']
        for count,stim in enumerate(stim_cat):
            for fid in range(35+1):  # range is an end half closed loop
                face_id[stim+f'_{1+fid:02d}'] = fid + 110 + count*40  # starting points are 110, 150, and 190
                
        block_num = {}
        for num in range(1,3+1):
            block_num[f'block number {num:01d}'] = num + 10
        
        other_events = {'trial onset': 1, 'trial end':2,
                        'face onset happy':101, 'face onset angry':102, 'face onset neutral':103, 
                        'face male':231, 'face female':232, 'face offset':104, 
                        'question onset':105,
                        'response male onset':254, 'response female onset':255, 
                        'block end':15,'experiment end':20, 'experiment abort':21}
        
        events_id = other_events | face_id | block_num
        
    elif task == 'rest':
            
        other_events = {'rest start': 1, 'rest end':2,
                        'experiment abort':21}
        
        events_id = other_events
        
    # Write into BIDS format
    if task == 'noise':
        write_raw_bids(raw, noise_bids_path, overwrite=True)
    else:
        write_raw_bids(raw, bids_path, events_data=events_data, 
                       event_id=events_id, overwrite=True)
    
    # Write in Maxfilter files
    write_meg_calibration(calibration_file, bids_path=bids_path, verbose=False)
    write_meg_crosstalk(crosstalk_file, bids_path=bids_path, verbose=False)
    
# MRI bids conversion
""" using the trans file created by coregistration, we now convert T1W MRI file 
to bids format"""

trans_folder = op.join(bids_root, 'derivatives', 'flux-pipeline',
                       'sub-' + subject, 'T1w-MRI')  # RDS folder for trans file
trans_fname = op.join(trans_folder, 'sub-' + subject + '_ses-' + session
                      + '_' + 'coreg-trans.fif')
fs_sub_dir = r'Z:\Projects\mTBI_predict\Collected_Data\MRI_data\sub-04'  # FreeSurfer directory
fs_sub = f'sub-{subject}'
t1_fname = op.join(fs_sub_dir, fs_sub + '.nii')

# Create the BIDSpath object
""" creat MRI specific bidspath object and then use trans file to transform 
landmarks from the raw file to the voxel space of the image"""

t1w_bids_path = BIDSPath(subject=subject, session=session, 
                         root=bids_root, suffix='T1w')

info = read_raw_bids(bids_path=bids_path, verbose=False).info
trans = mne.read_trans(trans_fname)  
landmarks = get_anat_landmarks(
    image=t1_fname,  # path to the nifti file
    info=info,  # MEG data file info from the subject
    trans=trans,
    fs_subject=fs_sub,
    fs_subjects_dir=fs_sub_dir)

t1w_bids_path = write_anat(
    image=t1_fname, bids_path=t1w_bids_path,
    landmarks=landmarks, deface=True,
    overwrite=True, verbose=True)

# Take a quick look at the MRI
t1_nii_fname = op.join(t1w_bids_path.directory, t1w_bids_path.basename)

fig, ax = plt.subplots()
plot_anat(t1_nii_fname, axes=ax, title='Defaced')
plt.show()