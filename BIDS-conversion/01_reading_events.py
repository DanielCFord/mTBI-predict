"""
===============================================
01. Extract events from the stimulus channels

this code is used to check and plot the timings
of triggers and creates -eve.fif file and generates
an HTML report file

written by Tara Ghafari
adapted from Oscar Ferrante 
==============================================  
ToDos:
    1) Run the code for other tasks (emoface
                                     CRT
                                     rest
                                     noise)
Issues:
    1) generate the report when mne.Report reads
    bids event file
Contributions to Community:
    1) 
Questions:
    1) 
"""

# Import relevant Python modules
import os.path as op
import os

import mne
import matplotlib.pyplot as plt

# fill these out
site = 'Birmingham'
subj_code = 'b59d'  # subject code generated by participant pc
subject = '04'  # subject code in mTBI project
ann_sub = '2'  # annonimyzed code for subject
session = '01'  # data collection session for each participant
run = '01'  # data collection run for each session
pilot = 'P' # is the data collected 'P'ilot or 'T'ask?
day = '14'  # date of data collection -> removed after anonymization
month = '09'
year = '2022'

report = True  # do you want to generate a report?

# only usefule if you want to take the name of task and everything from file name
# if 'SpAtt'.upper().lower() in file_name:
#     task = 'SpAtt'
# elif 'CRT'.upper().lower() in file_name:
#     task = 'CRT'
# elif 'EmoFace'.upper().lower() in file_name:
#     task = 'EmoFace'

tasks = ['SpAtt', 'CRT', 'EmoFace','rest']  # short name of task

for task in tasks:

    # specify specific file names
    MEG_data_folder = r'Z:\MEG_data\Pilot Participants'  # RDS folder for MEG data
    
    if site == 'Aston' or site == 'Birmingham':
        data_path = op.join(MEG_data_folder, year + month + day + '_' + subj_code, 
                            year[-2:] + month + day)
        file_extension = '.fif'
        file_name = op.join('sub_' + pilot + '1' + subject + '_ses_' + session +
                            '_task_' + task + '_run_' + run + '_meg')
    elif site == 'Nottingham':
        data_path = op.join(MEG_data_folder, 'NottinghamEquipTest')
        file_prename = 'phantom_mTBIPredict_'
        file_extension = '.ds'
        file_name = op.join(file_prename + year + month + day + '_' + task.lower() 
                            + 'trigcheck')
        
    # Read the events from stim channel
    raw_fname = os.path.join(data_path, file_name + file_extension) 
    filename_events = op.join(data_path,file_name + '-eve' + file_extension)

    # Report folder names
    report_root = r'Z:\Projects\mTBI predict\Results - Outputs\mne Reports'  # RDS folder for reports
    if not op.exists(op.join(report_root , 'sub-' + ann_sub, 'task-' + task)):
        os.makedirs(op.join(report_root , 'sub-' + ann_sub, 'task-' + task))
    report_folder = op.join(report_root , 'sub-' + ann_sub, 'task-' + task)
    report_fname = op.join(report_folder, 'report_events.html')
    
    # read raw and define the stim channel
    if 'fif' in file_extension:
        raw = mne.io.read_raw_fif(raw_fname, allow_maxshield=True, 
                                  verbose=True, preload=False)
        stim_channel = 'STI101'
    
    elif 'ds' in file_extension:
        raw = mne.io.read_raw_ctf(raw_fname, system_clock='truncate', 
                                  verbose=True, preload=True)
        stim_channel = 'UPPT002'
        
    
    events = mne.find_events(raw, stim_channel=stim_channel, min_duration=0.001001,
                             consecutive=False, mask=65280,
                             mask_type='not_and')  #' mask removes triggers associated
                                                   # with response box channel 
                                                   # (not the response triggers)'

    # Save the events in a dedicted FIF-file: 
    mne.write_events(filename_events, events, overwrite=True)
        
    # Report the events file
    sfreq = raw.info['sfreq']
    if report == True:
        report = mne.Report(title='Events')
        report.add_events(events=events, title='events from "events"', sfreq=sfreq)
        report.save(report_fname, overwrite=True, open_browser=True)
    
    # Visualise a part of the events-array
    plt.figure()
    plt.stem(events[:,0], events[:,2])
    plt.xlim(min(events[:,0]), min(events[:,0])+100000)
    plt.title(task)
    plt.xlabel('sample')
    plt.ylabel('Trigger value (STI101)')

plt.show()  # show all plots together





